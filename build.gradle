import java.nio.file.Files
import java.nio.file.Paths
import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        mavenLocal()
        maven {url 'https://jenkins.cs.ox.ac.uk/artifactory/plugins-snapshot'}
        maven {url 'https://jenkins.cs.ox.ac.uk/artifactory/plugins-release'}
        mavenCentral()
    }
    dependencies {
        classpath "ox.softeng.gradle:oxbrcinformatics-gradle-plugins:$oxbrcinformaticsGradlePluginsVersion"

        // The version of spring-core included is 3.1.3.RELEASE which is incompatible with the grails-gradle-plugin used by all the
        // the Grails modules and causes issues when trying to run-app therefore we exclude it
        classpath("gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:$licenseGradlePluginVersion") {
            exclude group: 'org.springframework', module: 'spring-core'
        }

        // However without spring-core the license plugin won't work so we need to include it at the top level
        // this version will need to be kept inline with Grails' spring-core
        classpath "org.springframework:spring-core:$licenseGradlePluginSpringCoreOverrideVersion"

        configurations.classpath {
            // check for updates every build
            resolutionStrategy.cacheChangingModulesFor 0, TimeUnit.SECONDS
        }
    }
}

apply plugin: 'com.github.hierynomus.license'
apply plugin: 'ox.softeng.ox-brc-standard'
apply plugin: 'ox.softeng.ox-brc-artifactory'
apply plugin: 'ox.softeng.ox-brc-grails-reliant'
apply plugin: 'ox.softeng.integration-test'
apply plugin: 'ox.softeng.static-code-analysis'

jar {
    exclude 'logback.groovy'
}

integrationTest {
    maxHeapSize = '4g'
    jvmArgs '-XX:+TieredCompilation', '-XX:TieredStopAtLevel=1', '-XX:CICompilerCount=3'

    def envMap = System.getenv()
    String opts = envMap.GRAILS_FORK_OPTS ?: envMap.GRAILS_OPTS
    if (opts) {
        jvmArgs opts.split(' ')
    }
}

logger.quiet(
    "Available processors: ${Runtime.runtime.availableProcessors()} | " +
    "Max unit test parallel forks: ${Runtime.runtime.availableProcessors().intdiv(2) ?: 1}")

afterEvaluate {

    configurations.all {
        // check for updates every build
        resolutionStrategy.cacheChangingModulesFor 0, TimeUnit.SECONDS
        resolutionStrategy.cacheDynamicVersionsFor 0, TimeUnit.SECONDS
    }
    tasks.withType(JavaExec) {
        systemProperty 'env.logFileName', project.name
    }

    if (project.hasProperty('mainClass')) {
        applicationDefaultJvmArgs += "-Dmc.logFileName=${applicationName}"
        applicationDefaultJvmArgs += '-Dgrails.env=CUSTOM'
    }

    /*
     * Configure all the properties for testing,
     * these are also required by the gretty startbasetasks,
     * anything which runs up the app needs alot of these properties to make sure it all works
     * If system property for the index base isnt set then create a value
     */
    if (!System.getProperty('hibernate.search.default.indexBase')) {
        System.setProperty('hibernate.search.default.indexBase', "/tmp/${UUID.randomUUID().toString()}")
    }

    Closure runConfig = {
        System.properties.each {prop ->
            systemProperty prop.key, prop.value
        }
        systemProperty 'user.dir', projectDir
        String indexBase = systemProperties['hibernate.search.default.indexBase']
        doFirst {
            logger.warn("==> Using ${indexBase} for hibernate.search.default.indexBase <==")
            Files.createDirectories(Paths.get(indexBase))
        }
        doLast {
            Paths.get(indexBase).deleteDir()
        }
    }

    tasks.withType(Test, runConfig)
}

apply from: 'dependencies.gradle'
apply from: "${projectDir}/gradle/additions/mdm.gradle"
apply from: "${projectDir}/gradle/additions/staticCodeAnalysis.gradle"
